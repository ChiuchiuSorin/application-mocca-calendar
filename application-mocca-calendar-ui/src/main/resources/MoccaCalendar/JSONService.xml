<?xml version="1.0" encoding="UTF-8"?>

<xwikidoc version="1.1">
  <web>MoccaCalendar</web>
  <name>JSONService</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <creationDate>1377502319000</creationDate>
  <parent>WebHome</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <date>1391974785000</date>
  <contentUpdateDate>1391974785000</contentUpdateDate>
  <version>1.1</version>
  <title/>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <content>{{velocity output="false"}}
#if("$!{request.outputSyntax}" == 'plain')
  $response.setContentType('application/json')
#end
{{/velocity}}
{{groovy}}
// special case: find a new unused event name
// here we need a longer "while" loop
if (request.newEvent) {
  def wiki = doc.wiki
  def space = request.space
  if (!space) {
     space = doc.space
  }
  def eventNameBase = request.newEvent
  def eventName = eventNameBase

  def counter = 0
  def error = null

  while (xwiki.exists(services.model.createDocumentReference(wiki, space, eventName)) &amp;&amp; (error == null)) {
     counter++;
     eventName = eventNameBase + (counter as String);
     if (counter &gt; 999) {
       error = "val_title_already_exists";
     }
  }
  if (error != null) {
      services.localization.use('document', 'MoccaCalendar.MoccaCalendarTranslations')
      print new groovy.json.JsonBuilder( [ 'error' : services.localization.render(error) ] )
  } else {
      print new groovy.json.JsonBuilder( [ 'name' : eventName ] )
  }
}
{{/groovy}}
{{velocity filter="html" wiki="false"}}
#if($xcontext.action == 'get')
#if("$!{request.newEvent}"!="")
  #break
#end

#set($startQuery = $datetool.getDate())
#set($startTime = $mathtool.toNumber($request.start))
#set($startTime = $mathtool.mul($startTime ,1000))
#set($discard = $startQuery.setTime($startTime))

#set($qsy = $datetool.getYear($startQuery))
#set($qsm = $mathtool.add($datetool.getMonth($startQuery),1))
#set($qsd = $datetool.getDay($startQuery))
#set($whereQuery = "and (year(date.value) &gt; :startyear or ( year(date.value) = :startyear and (month(date.value) &gt; :startmonth or (month(date.value) = :startmonth and day(date.value) &gt;= :startday))))")

#set($endQuery = $datetool.getDate())
#set($endTime = $mathtool.toNumber($request.end))
#set($endTime = $mathtool.mul($endTime, 1000))
#set($discard = $endQuery.setTime($endTime))

#set($qey = $datetool.getYear($endQuery))
#set($qem = $mathtool.add($datetool.getMonth($endQuery),1))
#set($qed = $datetool.getDay($endQuery))
#set($whereQuery = "$whereQuery and (year(date.value) &lt; :endyear or ( year(date.value) = :endyear and (month(date.value) &lt; :endmonth or (month(date.value) = :endmonth and day(date.value) &lt;= :endday))))")

#set($queryParams = { "startyear" : $qsy, "startmonth" : $qsm, "startday" : $qsd, "endyear" : $qey, "endmonth" : $qem, "endday" : $qed })

#if("$!{request.filter}" != "" &amp;&amp; "$!{request.calendarDoc}" != "")
  #set($document = $xwiki.getDocument($request.calendarDoc))
  #if("$!{request.filter}" == "page")
    #set($whereQuery = "$whereQuery and (doc.parent = :parentDoc)")
    #set($discard = $queryParams.put('parentDoc', $request.calendarDoc))
  #end
  #if("$!{request.filter}" == "space")
    #set($document = $xwiki.getDocument($request.calendarDoc))
    #set($translated = $document.getTranslatedDocument())
    #set($space = $translated.getSpace())
    #set($whereQuery = "$whereQuery and (doc.space = :space)")
    #set($discard = $queryParams.put('space', $space))
  #end
#end

#set($discard = $queryParams.put('startDateField', $request.startfield))
#set($discard = $queryParams.put('eventClass', $request.classname))
#set($hql =", BaseObject as obj, DateProperty as date where doc.fullName=obj.name and obj.id=date.id.id and date.id.name= :startDateField and doc.name!='MoccaCalendarEventTemplate' and obj.className= :eventClass $whereQuery order by date.value asc")

#set($query = $services.query.hql($hql))
#foreach($param in $queryParams.entrySet())
  #set($query = $query.bindValue($param.key, $param.value))
#end

#set($jsondateformat = $xwiki.jodatime.getDateTimeFormatterForPattern("yyyy-MM-dd'T'HH:mm"))
#set($results = [])
#foreach($item in $query.execute())
  #set($itemdoc = $xwiki.getDocument($item))
  #set($parentCalDocName = $itemdoc.getParent())
  #if($parentCalDocName == "$!lastparentCalDocName")
    #set($color="$!lastColor")
  #else
    #set($lastparentCalDocName = $parentCalDocName)
    #set($color="$!xwiki.getDocument($parentCalDocName).getValue('color')")
    #set($lastColor = $color)
  #end
  #set($startdate = $itemdoc.getValue($request.startfield))
  #set($enddate = $itemdoc.getValue($request.endfield))
  #set($duration = $itemdoc.getValue($request.durationfield))
  #if(!$duration)
    #set($duration = "30")
  #end
  #if($startdate)
    #set($startdate = $xwiki.jodatime.getDateTime($startdate.getTime()))
    #if($enddate)
      #set($enddate = $xwiki.jodatime.getDateTime($enddate.getTime()))
    #else
      #set($enddate = $startdate.plusMinutes($duration))
    #end
    #set($allDay=false)
    #if("$!itemdoc.getValue('allDay')"==1)
      #set($allDay=true)
    #end
    #set($event = {"id" : $itemdoc.getDocumentReference().toString(), "title" : $itemdoc.getPlainTitle(), "url" : $itemdoc.getURL('view',"calendarDoc=$!request.calendarDoc"), "start" : $jsondateformat.print($startdate), "end" : $jsondateformat.print($enddate), "allDay" : $allDay, "color" : $color })
    #if("$!{request.outputView}"=="plainList")
      #set($format = $!itemdoc.getObject("${request.classname}").getxWikiClass().get($request.startfield).getProperty('dateFormat').value)
      #if($!format=="")
        #set($format = $xwiki.getSpacePreference('dateformat', 'dd.MM.yyyy'))
      #end
      #if($allDay)
        #set($idx = $format.indexOf("H"))
        #if($idx &gt; 0)
          #set($format = $format.substring(0,$idx).trim())
        #end
      #end
      #set($dateprinter = $xwiki.jodatime.getDateTimeFormatterForPattern($format))
      #set($html = '&lt;div class="moccaevent" style="border-color:' +$color + '"&gt;')
      #set($html = "${html}"+'&lt;h5&gt;&lt;a href="'+${itemdoc.getURL("view")}+'"&gt;' + $escapetool.html($itemdoc.getPlainTitle()) + '&lt;/a&gt;&lt;/h5&gt;')
      #if($allDay)
         #set($discard = $services.localization.use('document', 'MoccaCalendar.MoccaCalendarTranslations'))
        #set($html = "${html}" + '&lt;p class="date"&gt;' + $dateprinter.print($startdate) + ' ' + $services.localization.render('MoccaCalendar.calendar.allday')+'&lt;/p&gt;')
      #else
        #if($enddate.getYear() == $startdate.getYear() &amp;&amp; $enddate.getDayOfYear() == $startdate.getDayOfYear())
          #set($idx = $format.indexOf("H"))
          #if($idx &gt; 0)
            #set($timeformat = $format.substring($idx).trim())
          #else
            #set($timeformat = "HH:mm")
          #end
          #set($timeprinter = $xwiki.jodatime.getDateTimeFormatterForPattern($timeformat))
          #set($html = "${html}" + '&lt;p class="date"&gt;' + $dateprinter.print($startdate) + ' - ' + $timeprinter.print($enddate) + '&lt;/p&gt;')
        #else
          #set($html = "${html}" + '&lt;p class="date"&gt;' + $dateprinter.print($startdate) + ' - ' + $dateprinter.print($enddate) + '&lt;/p&gt;')
        #end
      #end
      #set($desc = $itemdoc.getValue('description'))
      #if($desc)
        #set($desc = $services.rendering.parse($desc, "xwiki/2.1"))
        #set($desc = $services.rendering.render($desc, "xhtml/1.0"))
        #set($html = "${html}"  + $desc )
      #end
      #set($html = "${html}&lt;/div&gt;")
      #set($discard = $event.put("html", $html))
    #end
    #set($discard = $results.add($event))
  #end
#end
$jsontool.serialize($results)
#else
Service Page for the Mocca Calendar Application
#end ## end of #if($xcontext.action == 'get')
{{/velocity}}</content>
</xwikidoc>
